ifndef COOJAA
  $(error COOJAA not defined! You must specify where COOJAA resides!)
endif


CONTIKI_TARGET_DIRS = . dev cfs
CONTIKI_TARGET_MAIN = ${addprefix $(OBJECTDIR)/,contiki-main.o}
CONTIKI_TARGET_SOURCEFILES += platform.c xmem.c buttons.c gpio-hal-arch.c eeprom.c \
  rtimer-arch.c watchdog.c native-event2.c foo-radio.c native-clock.c

# The different options
MAKE_CFS_POSIX = 1
MAKE_CFS_COFFEE = 2

# Use CFS POSIX the default CFS backend.
MAKE_CFS ?= MAKE_CFS_POSIX

ifeq ($(MAKE_CFS),MAKE_CFS_POSIX)
  CONTIKI_TARGET_SOURCEFILES += cfs-posix.c cfs-posix-dir.c
else ifeq ($(MAKE_CFS),MAKE_CFS_COFFEE)
  MODULES += $(COOJAA_STORAGE_DIR)/cfs
else
  ${error Invalid MAKE_CFS configuration: "$(MAKE_CFS)"}
endif

MODULES += adapter/lib/event2

# No stack end symbol available, code does not work on 64-bit architectures.
MODULES_SOURCES_EXCLUDES += stack-check.c
# No Serial Peripheral Interface on Native.
MODULES_SOURCES_EXCLUDES += spi.c


ifeq ($(HOST_OS),Linux)
TARGET_LIBFILES += -lrt
endif

CONTIKI_SOURCEFILES += $(CONTIKI_TARGET_SOURCEFILES)

.SUFFIXES:

### Compiler definitions
CC       = gcc
CXX      = g++
ifdef LD_OVERRIDE
  LD     = $(LD_OVERRIDE)
else
  LD     = gcc
endif
AS       = as
NM       = nm
OBJCOPY  = objcopy
STRIP    = strip
ifeq ($(WERROR),1)
CFLAGSWERROR=-Werror
endif
CFLAGSNO = -Wall -g $(CFLAGSWERROR)
CFLAGS  += $(CFLAGSNO)
CFLAGS  += -Wl,-ecoojaa_main

### Are we building with code size optimisations?
SMALL ?= 0

# The optimizations on native platform cannot be enabled in GCC (not Clang) versions less than 7.2
GCC_IS_CLANG := $(shell $(CC) --version 2> /dev/null | grep clang)
ifneq ($(GCC_IS_CLANG),)
  NATIVE_CAN_OPTIIMIZE = 1
else
  GCC_VERSION := $(shell $(CC) -dumpfullversion -dumpversion | cut -b1-3)
  ifeq ($(shell expr $(GCC_VERSION) \>= 7.2), 1)
    NATIVE_CAN_OPTIIMIZE = 1
  else
    NATIVE_CAN_OPTIIMIZE = 0
  endif
endif

ifeq ($(NATIVE_CAN_OPTIIMIZE),1)
  ifeq ($(SMALL),1)
    CFLAGS += -Os
  else
    CFLAGS += -O2
  endif
endif

ifeq ($(HOST_OS),Darwin)
AROPTS = -rc
LDFLAGS_WERROR := -Wl,-fatal_warnings
LDFLAGS += -Wl,-flat_namespace
CFLAGS += -DHAVE_SNPRINTF=1 -U__ASSERT_USE_STDERR
endif

# Disallow undefined symbols in object files.
ifeq ($(HOST_OS),Linux)
LDFLAGS += -Wl,-zdefs
endif
